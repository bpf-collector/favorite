server:
  port: 9096

spring:
  # 数据源
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/pro_favorite
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource

  # JPA
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        enable_lazy_load_no_trans: true
        format_sql: true

  # 模板引擎
  freemarker:
    cache: false
    charset: UTF-8
    content-type: text/html;charset=UTF-8
    enabled: true
    suffix: .ftl
    template-loader-path: classpath:/views/
    # 模板引擎是否可以直接获取 request 域的属性
    request-context-attribute: request
    # 配置 request 和 session 的键值对添加到
    # AbstractTemplateView.renderMergedOutputModel() 方法的`Map model`参数中
    expose-request-attributes: true
    expose-spring-macro-helpers: true
    # 模板引擎是否可以直接获取 session 域的属性
    expose-session-attributes: true
    settings:
      tag_syntax: auto_detect     # 配置标签语法为自动，页面可以将<>改为[]，为了区别html标签
      template_update_delay: 0    # 模板更新时间，单位: 秒
      default_encoding: UTF-8     # 默认的编码字符集
      output_encoding: UTF-8      # 模板输出的编码字符集
      locale: zh_CN               # 本地化配置
      date_format: yyyy-MM-dd     # 日期格式化
      time_format: HH:mm:ss       # 时间格式化
      datetime_format: yyyy-MM-dd HH:mm:ss  # 日期时间格式化
      number_format: #.##         # 数字格式化
      boolean_format: true, false # 布尔值格式化
      # ignore, debug, html_debug, rethrow
      # 1. TemplateExceptionHandler.IGNORE_HANDLER
      #    压制所有异常，对异常处理没有任何作用，也不抛出异常，页面可以正常渲染，后台抛异常。
      # 2. TemplateExceptionHandler. DEBUG_HANDLER（默认）
      #    打印堆栈信息和重新抛出异常。
      # 3. TemplateExceptionHandler. HTML_DEBUG_HANDLER（建议使用）
      #    与[2]相同，但可以格式化堆栈跟踪信息。
      # 4. TemplateExceptionHandler.RETHROW_HANDLER
      #    只重新抛出异常而不做其他事情。
      # 5. 自定义异常类实现 TemplateExceptionHandler ，然后重写handleTemplateException()方法
      template_exception_handler: html_debug